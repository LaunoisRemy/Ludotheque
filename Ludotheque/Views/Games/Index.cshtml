@inject Microsoft.AspNetCore.Identity.SignInManager<Ludotheque.Areas.Identity.Data.LudothequeUser> signInManager;

@{
    ViewData["Title"] = "Index";
    Layout = "TableGame";
}
@section Head{
    <h1>Index</h1>

    @if (TempData["success"] != null)
    {
        if (TempData["success"].Equals("true"))
        {
            <div class="alert alert-success" role="alert">
                @TempData["message"]
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                @TempData["message"]
            </div>
        }

    }



    <div asp-validation-summary="All">
    </div>

    <form asp-action="Index" method="get">
        <div class="input-group input-group-sm ">
            <div class="form-actions no-color input-group-prepend">
                <input placeholder="Name" class="form-control" type="text" name="SearchString" value="@ViewData["currentFilter"]" />
                <input class="btn btn-success" role="button" type="submit" value="Search" />
                <a class="btn btn-primary"  role="button" asp-action="Index">Index</a>
            </div>
        </div>
    </form>
}

@section Bottom
{
    @{

        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }

    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-outline-secondary @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-outline-secondary @nextDisabled">
        Next
    </a>
    @if (signInManager.IsSignedIn(User))
    {
        <a type="button" class="btn btn-outline-primary" asp-action="Create">Create New</a>
    }
}

